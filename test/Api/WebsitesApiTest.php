<?php
/**
 * WebsitesApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Upmind\EnhanceSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * orchd
 *
 * orchd API docs
 *
 * The version of the OpenAPI document: 8.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Upmind\EnhanceSdk\Test\Api;

use \Upmind\EnhanceSdk\Configuration;
use \Upmind\EnhanceSdk\ApiException;
use \Upmind\EnhanceSdk\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * WebsitesApiTest Class Doc Comment
 *
 * @category Class
 * @package  Upmind\EnhanceSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WebsitesApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for authorizeWebsiteSshKey
     *
     * Authorize a new SSH key..
     *
     */
    public function testAuthorizeWebsiteSshKey()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for authorizeWebsiteSshPassword
     *
     * Authorize a new SSH password for website..
     *
     */
    public function testAuthorizeWebsiteSshPassword()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createFtpUser
     *
     * Creates a new FTP user for a given website.
     *
     */
    public function testCreateFtpUser()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createPreviewDomain
     *
     * Create a preview domain.
     *
     */
    public function testCreatePreviewDomain()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createWebsite
     *
     * Create a new website or clone an existing one..
     *
     */
    public function testCreateWebsite()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createWebsiteDomainAlias
     *
     * Create website domain alias.
     *
     */
    public function testCreateWebsiteDomainAlias()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createWebsiteDomainLetsencryptCerts
     *
     * Generate and setup letsencrypt ssl certificates for website's domain.
     *
     */
    public function testCreateWebsiteDomainLetsencryptCerts()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createWebsiteMySQLDB
     *
     * Create a MySQL database for website.
     *
     */
    public function testCreateWebsiteMySQLDB()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteFtpUser
     *
     * Deletes given FTP user.
     *
     */
    public function testDeleteFtpUser()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteUserCrontab
     *
     * Delete user's crontab.
     *
     */
    public function testDeleteUserCrontab()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteWebsite
     *
     * Delete website.
     *
     */
    public function testDeleteWebsite()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteWebsiteDomainMapping
     *
     * Delete website domain mapping.
     *
     */
    public function testDeleteWebsiteDomainMapping()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteWebsiteSetting
     *
     * Delete a single override setting.
     *
     */
    public function testDeleteWebsiteSetting()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteWebsiteSslCert
     *
     * Deletes given ssl certificate.
     *
     */
    public function testDeleteWebsiteSslCert()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteWebsites
     *
     * Delete websites.
     *
     */
    public function testDeleteWebsites()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for enableWebsiteSslCert
     *
     * Enables already stored certificate for a given domain.
     *
     */
    public function testEnableWebsiteSslCert()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getFtpUsers
     *
     * Returns all ftp users data for a given website.
     *
     */
    public function testGetFtpUsers()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getScreenshotTimestamp
     *
     * Get last screeshot file's Timestamp.
     *
     */
    public function testGetScreenshotTimestamp()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSiteAccessToken
     *
     * Get an access token for the given website.
     *
     */
    public function testGetSiteAccessToken()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getUserCrontab
     *
     * Get user's crontab.
     *
     */
    public function testGetUserCrontab()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsite
     *
     * Get website.
     *
     */
    public function testGetWebsite()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteBackupStatus
     *
     * Get the status of an ongoing website backup operation.
     *
     */
    public function testGetWebsiteBackupStatus()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteClonesStatus
     *
     * Get the status of the clone operation of a given website.
     *
     */
    public function testGetWebsiteClonesStatus()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteDomainDnsQuery
     *
     * Recursively query Dns servers for given domain.
     *
     */
    public function testGetWebsiteDomainDnsQuery()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteDomainMapping
     *
     * Returns website domain mapping.
     *
     */
    public function testGetWebsiteDomainMapping()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteDomainMappingDnsStatus
     *
     * Returns website domain mapping DNS status.
     *
     */
    public function testGetWebsiteDomainMappingDnsStatus()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteDomainMappings
     *
     * Get website's mapped domains.
     *
     */
    public function testGetWebsiteDomainMappings()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteHtaccessIpsRule
     *
     * Returns current rules of blocked/whitelisted IPs.
     *
     */
    public function testGetWebsiteHtaccessIpsRule()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteHtaccessRewrites
     *
     * Reads chains of rewrite rules.
     *
     */
    public function testGetWebsiteHtaccessRewrites()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteMetrics
     *
     * Get website metrics.
     *
     */
    public function testGetWebsiteMetrics()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteMySQLDBs
     *
     * Get website MySQL databases.
     *
     */
    public function testGetWebsiteMySQLDBs()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteServerDomains
     *
     * Fetch website server domains.
     *
     */
    public function testGetWebsiteServerDomains()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteSetting
     *
     * Get the value for a particular setting.
     *
     */
    public function testGetWebsiteSetting()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteSshKeys
     *
     * Get website's authorized SSH keys.
     *
     */
    public function testGetWebsiteSshKeys()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteSslCert
     *
     * Fetches a single SSL cert.
     *
     */
    public function testGetWebsiteSslCert()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsiteSslCerts
     *
     * Returns all certificates data with domain mappings for a given website.
     *
     */
    public function testGetWebsiteSslCerts()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebsites
     *
     * Get websites.
     *
     */
    public function testGetWebsites()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for pushWebsiteLive
     *
     * Making a staging website live.
     *
     */
    public function testPushWebsiteLive()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setWebsiteSetting
     *
     * Set a single override setting.
     *
     */
    public function testSetWebsiteSetting()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for takeScreenshot
     *
     * Sends command to take website screenshot.
     *
     */
    public function testTakeScreenshot()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for unauthorizeWebsiteSshKey
     *
     * Unauthorize the public SSH key with the given ID..
     *
     */
    public function testUnauthorizeWebsiteSshKey()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateFtpUser
     *
     * Update given FTP user.
     *
     */
    public function testUpdateFtpUser()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateUserCrontab
     *
     * Update user's crontab.
     *
     */
    public function testUpdateUserCrontab()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateWebsite
     *
     * Update website.
     *
     */
    public function testUpdateWebsite()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateWebsiteDomainMapping
     *
     * Update website domain mapping.
     *
     */
    public function testUpdateWebsiteDomainMapping()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateWebsiteHtaccessIpsRule
     *
     * Sets a rule over provided ips - either block or allow.
     *
     */
    public function testUpdateWebsiteHtaccessIpsRule()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateWebsiteHtaccessRewrites
     *
     * Updates rewrite rules.
     *
     */
    public function testUpdateWebsiteHtaccessRewrites()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateWebsitePrimaryDomain
     *
     * Update primary domain mapping.
     *
     */
    public function testUpdateWebsitePrimaryDomain()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateWebsiteSshKey
     *
     * Update an existing website public SSH key..
     *
     */
    public function testUpdateWebsiteSshKey()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uploadWebsiteSslCerts
     *
     * Upload custom ssl certificate, key and optional fullchain for a given website.
     *
     */
    public function testUploadWebsiteSslCerts()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for validateWebsiteOperation
     *
     * Validate whether a website operation is allowed.
     *
     */
    public function testValidateWebsiteOperation()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
